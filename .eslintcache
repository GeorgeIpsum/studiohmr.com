[{"/Users/g1n/StudioHMR/studiohmr.com/src/index.tsx":"1","/Users/g1n/StudioHMR/studiohmr.com/src/App.tsx":"2"},{"size":500,"mtime":1607799716681,"results":"3","hashOfConfig":"4"},{"size":5151,"mtime":1607809375804,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fwm2ab",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/Users/g1n/StudioHMR/studiohmr.com/src/index.tsx",[],"/Users/g1n/StudioHMR/studiohmr.com/src/App.tsx",["11","12"],"import React, { CSSProperties, useEffect, useState } from 'react';\nimport { ReactComponent as Bg } from './bg.svg';\nimport hmr from './hmr.png';\nimport hmrw from './hmr.webp';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation\n} from \"react-router-dom\";\nimport './App.css';\n\nconst getThings = () => {\n  const a: (HTMLElement | null)[] = [];\n  for (let i = 1; i < 15; i++) {\n    const b = document.getElementById(`bg_${ i }`);\n    if (b) a.push(b);\n  }\n  return a;\n}\n\nfunction easeInSine(x: number): number {\n  return 1 - Math.cos((x * Math.PI) / 2);\n}\n\n// function easeInCubic(x: number): number {\n//   return x * x * x;\n// }\n\n// function easeInCirc(x: number): number {\n//   return 1 - Math.sqrt(1 - Math.pow(x, 2));\n// }\n\nconst easingFunc = easeInSine;\n\nconst App: React.FC = () => {\n  return (<>\n    <Router>\n      <Switch>\n        <Route path=\"/sunrise\">\n          <Sunrise />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  </>);\n}\n\nconst Home: React.FC = () => {\n  const loc = useLocation();\n  const { height } = useWindowSize();\n  const imgSize = 0.3 * (height ?? 1200);\n  const middleHeight = (window.innerHeight / 2) - (imgSize / 2);\n  const middleWidth = (window.innerWidth / 2) - (imgSize / 2);\n  const [useTransform, setUseTransform] = useState<boolean>(false);\n  const [firstTransform, setFirstTransform] = useState<boolean>(false);\n  const [showText, setShowText] = useState<boolean>(false);\n\n  useEffect(() => {\n    const fills = getThings();\n    if (Array.isArray(fills)) {\n      for (let i = 0; i < fills.length; i++) {\n        const fill = fills[i];\n        setTimeout(() => {\n          if (fill) {\n            fill.style.opacity = '1';\n            fill.style.translate = '0px 0px';\n          }\n        }, (200 * fills.length * easingFunc((i + 1) / fills.length)));\n      }\n    }\n    setTimeout(() => {\n      setFirstTransform(true);\n    }, 200);\n    setTimeout(() => {\n      console.log('does this ever run');\n      setUseTransform(true);\n    }, 1700);\n    setTimeout(() => {\n      setShowText(true);\n    }, 2500);\n  }, []);\n\n  const imageStyle: CSSProperties = {\n    height: imgSize,\n    width: imgSize,\n    pointerEvents: 'none'\n  };\n\n  const scale = (height ?? 500) < 500 ? 0.5 : 0.3;\n\n  const transform: CSSProperties = {\n    transform: `translate(-${ (window.innerWidth / 2 - (imgSize * scale) / 2) - 5 }px, -${ (window.innerHeight / 2 - (imgSize * scale) / 2) - 5 }px) scale(${ scale.toString() })`\n  };\n\n  let pictureStyle: CSSProperties = {\n    position: 'absolute',\n    top: middleHeight + (firstTransform ? 0 : 30),\n    left: middleWidth,\n    transition: 'scale 1s ease-out, transform 2s ease-in-out, opacity 1s ease-in, top 1s ease-in',\n    opacity: firstTransform ? '1' : '0'\n  };\n\n  if (useTransform) {\n    pictureStyle = {\n      ...pictureStyle,\n      ...transform\n    }\n  }\n\n  const h1Style: CSSProperties = {\n    position: 'absolute',\n    top: 5,\n    left: imgSize * scale + 5,\n    color: 'white',\n    height: imgSize * scale,\n    display: 'flex',\n    alignItems: 'center',\n    opacity: showText ? '1' : '0',\n    transition: 'opacity 0.5s ease-in'\n  }\n\n  return (<>\n    <div style={{ width: '100%', height: '100vh', display: 'flex', justifyContent: 'flex-end', alignItems: 'flex-start', flexFlow: 'row', background: 'black' }}>\n      <Bg style={{ width: '100%', height: '100vh' }} />\n    </div>\n    <picture id=\"logo\" style={pictureStyle}>\n      <source style={imageStyle} type=\"image/webp\" srcSet={hmrw} />\n      <img style={imageStyle} src={hmr} />\n    </picture>\n    <div style={h1Style}><h1 style={{ fontFamily: 'sans-serif', fontSize: 24 }}>STUDIO HMR</h1></div>\n  </>);\n}\n\nconst Sunrise: React.FC = () => {\n  return <div style={{ color: 'white' }}>Coming Soon</div>;\n}\n\nfunction useWindowSize() {\n  const [windowSize, setWindowSize] = useState<{ width?: number, height?: number }>({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n// function useMousePosition() {\n//   const [mousePosition, setMousePosition] = useState<{ mouseX?: number, mouseY?: number; }>({\n//     mouseX: undefined,\n//     mouseY: undefined\n//   });\n\n//   const handleMouseMove = (ev: MouseEvent) => {\n//     setMousePosition({\n//       mouseX: ev.clientX,\n//       mouseY: ev.clientY\n//     });\n//   }\n\n//   useEffect(() => {\n//     window.addEventListener(\"mousemove\", handleMouseMove);\n\n//     return () => window.removeEventListener(\"mousemove\", handleMouseMove);\n//   }, []);\n\n//   return mousePosition;\n// }\n\nexport default App;\n",{"ruleId":"13","severity":1,"message":"14","line":52,"column":9,"nodeType":"15","messageId":"16","endLine":52,"endColumn":12},{"ruleId":"17","severity":1,"message":"18","line":131,"column":7,"nodeType":"19","endLine":131,"endColumn":43},"@typescript-eslint/no-unused-vars","'loc' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]